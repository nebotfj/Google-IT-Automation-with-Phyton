At a basic level, a computer program is a recipe of instructions that tells your computer what to do. When you write a program, you create a step by step recipe of what needs to be done to complete a task and when your computer executes the program it reads what you wrote and follows your instructions to the letter. How nice is that? The recipe is written in a code called programming language. Programming languages are actually similar to humans spoken languages since they have a syntax and semantics. Now if it's been awhile since your last grammar class, here's a quick refresher on syntax and semantics. In a human language, syntax is the rules for how a sentence is constructed while semantics refers to the actual meaning of the statements. In English, sentences generally have both a subject, that's a person, place, or thing and a predicate usually a verb and a statement that explains what the subject is doing. Let's take the sentence, Paula loves to program in Python as an example. In this sentence, Paula is the subject and loves to program in Python is the predicate. To form a sentence that others can understand, you need to know both the syntax that constructs the sentence and the semantics that gives it meaning. The same applies to programming languages. In a programming language like Python, the syntax is the rules for how each instruction is written and the semantics is the effects the instructions have. Much like spoken languages, there are lots of programming languages to choose from. Each has its own history, features, and applications but they all share the same fundamental ideas. So once you understand the basic concepts in one programming language, it becomes much easier to learn another. Lastly, computers always do exactly what they're told. So when you write a program, it's important to be super clear about what you want the computer to do. Learning the syntax and semantics of the programming language you choose will allow you to do just that. Make sense? Before we continue, let's spend a moment on terminology. In the next few videos you'll hear the term script being used a bunch. So what's the difference between a script and a program? The line between the two can be a bit blurry. In this course, we'll use the terms interchangeably. In general, you can think of scripts as programs with a short development cycle that can be created and deployed rapidly. In other words, a script is a program that is short, simple, and can be written very quickly. In this course we'll focus on a specific scripting language called python which we'll use to learn the basics of programming. We'll learn about the python syntax, the rules of how to write a python program, and the semantics or meaning of the different pieces involved. Before we start learning how to code and having you write your first python script, let's talk more about what automation is and why it's useful.

En un nivel básico, un programa de computadora es una receta de instrucciones que le dice a su computadora qué hacer. Cuando escribe un programa, crea una receta paso a paso de lo que debe hacerse para completar una tarea y cuando el equipo ejecuta el programa lee lo que escribió y sigue las instrucciones al pie de la letra. ¿ Qué tan bonito es eso? La receta está escrita en un código llamado lenguaje de programación. Los lenguajes de programación son en realidad similares a los lenguajes hablados por humanos, ya que tienen una sintaxis y semántica. Ahora, si ha pasado un tiempo desde su última clase de gramática, aquí hay una actualización rápida sobre la sintaxis y la semántica. En un lenguaje humano, la sintaxis es las reglas de cómo se construye una oración mientras que la semántica se refiere al significado real de las declaraciones. En inglés, las oraciones generalmente tienen un tema, es decir, una persona, un lugar o una cosa y un predicado generalmente un verbo y una declaración que explica lo que el sujeto está haciendo. Tomemos la frase, Paula le encanta programar en Python como ejemplo. En esta frase, Paula es el sujeto y le encanta programar en Python es el predicado. Para formar una oración que otros puedan entender, es necesario conocer tanto la sintaxis que construye la oración como la semántica que le da significado. Lo mismo se aplica a los lenguajes de programación. En un lenguaje de programación como Python, la sintaxis son las reglas de cómo se escribe cada instrucción y la semántica es los efectos que tienen las instrucciones. Al igual que los lenguajes hablados, hay muchos lenguajes de programación para elegir. Cada uno tiene su propia historia, características y aplicaciones, pero todos comparten las mismas ideas fundamentales. Así que una vez que usted entiende los conceptos básicos en un lenguaje de programación, se vuelve mucho más fácil aprender otro. Por último, las computadoras siempre hacen exactamente lo que se les dice. Así que cuando escribes un programa, es importante tener muy claro lo que quieres que haga la computadora. Aprender la sintaxis y la semántica del lenguaje de programación que elija le permitirá hacer precisamente eso. ¿ Tiene sentido? Antes de continuar, vamos a dedicar un momento a la terminología. En los próximos videos escucharás el término guión que se está usando un montón. Entonces, ¿cuál es la diferencia entre un script y un programa? La línea entre los dos puede ser un poco borrosa. En este curso, usaremos los términos indistintamente. En general, puede pensar en los scripts como programas con un ciclo de desarrollo corto que se pueden crear e implementar rápidamente. En otras palabras, un script es un programa que es corto , simple y se puede escribir muy rápidamente. En este curso nos centraremos en un lenguaje de scripting específico llamado python que usaremos para aprender los conceptos básicos de la programación. Aprenderemos sobre la sintaxis de Python, las reglas de cómo escribir un programa de python y la semántica o el significado de las diferentes piezas involucradas. Antes de empezar a aprender a codificar y hacer que escriba su primer script de Python, hablemos más sobre qué es la automatización y por qué es útil.
